(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{118:function(e,n,t){"use strict";t.r(n);var o=t(115),l=t.n(o),r=t(116),h=t.n(r),c=t(117),d=t.n(c);l.a.registerLanguage("bash",h.a),l.a.registerLanguage("javascript",d.a);var m={name:"homepage",computed:{readme:()=>'<section><h1>üéâ Nuxt Prune HTML</h1>\n<p><a href="https://npmjs.com/package/@luxdamore/nuxt-prune-html"><img src="https://img.shields.io/npm/v/@luxdamore/nuxt-prune-html/latest.svg?style=flat-square" alt="npm version"></a>\n<a href="https://npmjs.com/package/@luxdamore/nuxt-prune-html"><img src="https://img.shields.io/npm/dt/@luxdamore/nuxt-prune-html.svg?style=flat-square" alt="npm downloads"></a>\n<a href="https://circleci.com/gh/LuXDAmore/nuxt-prune-html"><img src="https://img.shields.io/circleci/project/github/LuXDAmore/nuxt-prune-html.svg?style=flat-square" alt="Circle CI"></a>\n<a href="https://npmjs.com/package/@luxdamore/nuxt-prune-html"><img src="https://img.shields.io/badge/dependencies-up%20to%20date-brightgreen.svg?style=flat-square" alt="Dependencies"></a>\n<a href="https://npmjs.com/package/@luxdamore/nuxt-prune-html"><img src="https://img.shields.io/npm/l/@luxdamore/nuxt-prune-html.svg?style=flat-square" alt="License"></a>\n<a href="https://www.paypal.com/paypalme2/luxdamore"><img src="https://img.shields.io/badge/paypal-donate-black.svg?style=flat-square" alt="Donate"></a></p>\n<blockquote>\n<p>Nuxt module to prune html before sending it to the browser (it removes elements matching CSS selector(s)), useful for boosting performances showing a different HTML for bots (removing all the scripts).</p>\n</blockquote>\n<h2>üíò Motivation</h2>\n<p>Due to the versatility of Nuxt (and of the SSR in general), a website generated (or served) via node, has everything it needs already injected (in the HTML, ex. styles).\nSo, usually, for a bot or for a human, the website its almost visually the same.</p>\n<p>These library was born to remove the scripts injected in the HTML only if a visitor is a <strong>Bot</strong> or a <strong>Chrome Lighthouse</strong>. This should <strong>speed up</strong> (<strong>blazing fast</strong>) your <em>nuxt-website</em> up to a value of <strong>~ 95</strong> in <strong>performances</strong> during an <em>Audit</em> because it <a href="https://web.dev/lighthouse-performance/">cheats various scenarios</a> (ex. client-only tags could lead in a slower TTI).</p>\n<blockquote>\n<p>Obviously this could lead in some unexpected behaviors.</p>\n</blockquote>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>no SPA navigation;</li>\n<li>no lazy-load for images;</li>\n<li>no client-side-only.</li>\n</ul>\n<p><strong>Pro:</strong></p>\n<ul>\n<li>some of these features aren\'t &quot;used by&quot; a Bot or a Lighthouse Audit, so you don\'t really need it;</li>\n<li>less HTML;</li>\n<li>fast TTI, fast FCP, fast FMP, <em>fast ecc</em>.</li>\n</ul>\n<p>Inspired by this <a href="https://github.com/nuxt/rfcs/issues/22">rcfs</a> and this <a href="https://github.com/nuxt/nuxt.js/issues/2822">issue</a>.</p>\n<hr>\n<h3>Advices</h3>\n<ul>\n<li>before setting up the module, try to <a href="https://developers.google.com/web/tools/chrome-devtools/javascript/disable">Disable JavaScript With Chrome DevTools</a> and navigate;</li>\n<li>this plugin is made for working with Bots and it uses only the <code>remove()</code> method of <code>Cheerio</code>;</li>\n<li>if you <code>generate</code> your site it\'s not possibile to check the <em>user-agent</em>, so i choose to always prune HTML (you can disable this behavior changing <code>hookGeneratePage</code> to <code>false</code>);</li>\n<li>if you use some <code>client-only</code> components, you should prepare a version that is visually the same as the <code>client-only</code> and use it in the <a href="https://nuxtjs.org/api/components-client-only/">placeholder slot</a>;</li>\n<li>you can check the website as a GoogleBot, following <a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/override-user-agent">this guide</a>.</li>\n</ul>\n<h3>Related things you should know</h3>\n<ul>\n<li>It use the <a href="http://hgoebl.github.io/mobile-detect.js/">MobileDetect</a> library to check if <code>.is( \'bot\' )</code>, <code>.match( options.lighthouseUserAgent )</code> or <code>.match( options.matchUserAgent )</code>;</li>\n<li>Nuxt <a href="https://nuxtjs.org/api/configuration-hooks/">hooks</a>, so the plugin has access to <code>req.headers[ \'user-agent\' ]</code> only if the project is <strong>running as a server</strong> (ex. <code>nuxt start</code>);</li>\n<li><a href="https://github.com/cheeriojs/cheerio">Cheerio</a>.</li>\n</ul>\n<hr>\n<h2>Setup</h2>\n<ol>\n<li>Add <code>@luxdamore/nuxt-prune-html</code> dependency to your project;</li>\n<li>Add <code>@luxdamore/nuxt-prune-html</code> in the <code>modules</code> section of your <code>nuxt.config.js</code>;</li>\n</ol>\n<pre><code class="language-bash">\n    yarn add @luxdamore/nuxt-prune-html <span class="hljs-comment"># or npm install --save @luxdamore/nuxt-prune-html</span>\n\n</code></pre>\n<h2>Configuration</h2>\n<p><strong><em>N.B. : Shallow merge, not deep merge.</em></strong></p>\n<pre><code class="language-js">\n    <span class="hljs-comment">// nuxt.config.js</span>\n    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n\n        <span class="hljs-comment">// Module installation</span>\n        <span class="hljs-attr">modules</span>: [ <span class="hljs-string">\'@luxdamore/nuxt-prune-html\'</span> ],\n\n        <span class="hljs-comment">// Module config</span>\n        <span class="hljs-attr">pruneHtml</span>: {\n            <span class="hljs-attr">hideErrorsInConsole</span>: <span class="hljs-literal">false</span>,\n            <span class="hljs-attr">hideGenericMessagesInConsole</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// Disabled in production</span>\n            <span class="hljs-attr">enabled</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// Disabled in dev-mode due to the hot reload (is client-side)</span>\n            <span class="hljs-comment">// Css selectors to prune</span>\n            <span class="hljs-attr">selectors</span>: [\n                <span class="hljs-string">\'link[rel="preload"][as="script"]\'</span>,\n                <span class="hljs-string">\'script:not([type="application/ld+json"])\'</span>,\n            ],\n            <span class="hljs-comment">// It use Cheerio under the hood, so this is the config passed in the cheerio.load() method</span>\n            <span class="hljs-attr">cheerio</span>: {\n                <span class="hljs-attr">xmlMode</span>: <span class="hljs-literal">false</span>,\n            },\n            <span class="hljs-attr">ignoreBotOrLighthouse</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// Remove selectors in any case, not depending on Bot or Lighthouse</span>\n            <span class="hljs-attr">isBot</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// Remove selectors if is a bot</span>\n            <span class="hljs-attr">isLighthouse</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// Remove selectors if match the Lighthouse UserAgent</span>\n            <span class="hljs-attr">matchUserAgent</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// Remove selectors if this userAgent is matched</span>\n            <span class="hljs-attr">hookRenderRoute</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// Activate in `hook:render:route`</span>\n            <span class="hljs-attr">hookGeneratePage</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// Activate in `hook:generate:page`</span>\n            <span class="hljs-attr">lighthouseUserAgent</span>: <span class="hljs-string">\'lighthouse\'</span>, <span class="hljs-comment">// Value of the Lighthouse UserAgent</span>\n        },\n\n    };\n\n</code></pre>\n<hr>\n<h2>Development</h2>\n<ol>\n<li>Clone this repository;</li>\n<li>Install dependencies using <code>yarn install</code> or <code>npm install</code>;</li>\n<li>Start development server using <code>yarn dev</code> or <code>npm run dev</code>.</li>\n</ol>\n<h2>üêû Issues</h2>\n<p>Please make sure to read the <a href="/.github/ISSUE_TEMPLATE/bug_report.md">Issue Reporting Checklist</a> before opening an issue. Issues not conforming to the guidelines may be closed immediately.</p>\n<h2>üë• Contribution</h2>\n<p>Please make sure to read the <a href="/.github/ISSUE_TEMPLATE/feature_request.md">Contributing Guide</a> before making a pull request.</p>\n<h2>üìñ Changelog</h2>\n<p>Details changes for each release are documented in the <a href="./CHANGELOG.md"><strong>release notes</strong></a>.</p>\n<h3>üìÉ License</h3>\n<p><a href="./LICENSE">MIT License</a> // Copyright (¬©) 2019-present <a href="https://lucaiaconelli.it">Luca Iaconelli</a></p>\n<h4>üí∏ Are you feeling generous today?  :)</h4>\n<p>Do you want to share a beer? We can be good friends.. <strong><a href="https://www.paypal.me/luxdamore">Paypal</a> // <a href="https://www.patreon.com/luxdamore">Patreon</a></strong></p>\n<blockquote>\n<p><em>It\'s always a good day to be magnanimous - cit</em></p>\n</blockquote>\n<h4>üíº Hire me</h4>\n<p><a href="https://lucaiaconelli.it"><img src="https://img.shields.io/badge/email-Contact%20me-success" alt="Contacts"></a></p>\n<p><a href="https://ko-fi.com/luxdamore"><img src="https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi"></a></p>\n<hr>\n<h5>‚úî TODO</h5>\n<blockquote>\n<p>Just asking myself if i should do more.</p>\n</blockquote>\n<ul>\n<li>Add more tests.</li>\n</ul>\n</section>\n'},mounted(){this.$nextTick(()=>{this.initHighlight(),this.initReadmeLinks()})},methods:{initHighlight(){document.querySelectorAll("pre").forEach(e=>l.a.highlightBlock(e))},initReadmeLinks(){for(var e=document.querySelectorAll(".readme > article a, .readme > article pre"),i=0;i<e.length;i++)"A"===e[i].tagName&&(e[i].setAttribute("target","_blank"),e[i].setAttribute("rel","noopener"),e[i].setAttribute("title",e[i].textContent))}}},f=t(15),component=Object(f.a)(m,(function(){var e=this.$createElement,n=this._self._c||e;return n("main",{staticClass:"container readme"},[n("article",{staticClass:"markdown-body",domProps:{innerHTML:this._s(this.readme)}})])}),[],!1,null,null,null);n.default=component.exports}}]);